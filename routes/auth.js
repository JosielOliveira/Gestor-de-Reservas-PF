const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const Usuario = require("../models/usuario");

const router = express.Router();

// üìå Registro de Usuario
router.post("/register", async (req, res) => {
  try {
    const { nombre, email, contrase√±a } = req.body;

    console.log("üü¢ Intento de registro con:", email); // üëà Log para verificar

    // Verificar si el usuario ya existe
    const usuarioExistente = await Usuario.findOne({ email });
    if (usuarioExistente) {
      console.log("‚ùå Error: El usuario ya existe.");
      return res.status(400).json({ mensaje: "El usuario ya existe" });
    }

    // Encriptar la contrase√±a antes de guardarla
    const salt = await bcrypt.genSalt(10);
    const contrase√±aEncriptada = await bcrypt.hash(contrase√±a, salt);

    // Crear nuevo usuario
    const nuevoUsuario = new Usuario({
      nombre,
      email,
      contrase√±a: contrase√±aEncriptada,
      rol: "usuario" // üëà Agregamos el rol por defecto
    });

    await nuevoUsuario.save();
    console.log("‚úÖ Usuario registrado correctamente:", email);
    res.status(201).json({ mensaje: "Usuario registrado correctamente" });
  } catch (error) {
    console.error("‚ùå Error en el registro:", error);
    res.status(500).json({ mensaje: "Error en el registro", error });
  }
});

// üìå Inicio de Sesi√≥n
router.post("/login", async (req, res) => {
  try {
    const { email, contrase√±a } = req.body;
    console.log("üü¢ Intento de login con:", email); // üëà Log para verificar

    // Verificar si el usuario existe
    const usuario = await Usuario.findOne({ email });
    if (!usuario) {
      console.log("‚ùå Usuario no encontrado.");
      return res.status(400).json({ mensaje: "Usuario no encontrado" });
    }

    // Verificar la contrase√±a
    const contrase√±aValida = await bcrypt.compare(contrase√±a, usuario.contrase√±a);
    if (!contrase√±aValida) {
      console.log("‚ùå Contrase√±a incorrecta.");
      return res.status(400).json({ mensaje: "Contrase√±a incorrecta" });
    }

    // Generar Token JWT
    const token = jwt.sign(
      { id: usuario._id, rol: usuario.rol },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    console.log("‚úÖ Login exitoso. Token generado para:", email);
    res.json({ mensaje: "Inicio de sesi√≥n exitoso", token });
  } catch (error) {
    console.error("‚ùå Error en el login:", error);
    res.status(500).json({ mensaje: "Error en el login", error });
  }
});

module.exports = router;
